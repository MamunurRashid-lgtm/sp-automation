name: CI/CD Pipeline for Selenium Project

on:
  push:
    branches:
      - main  # Trigger the pipeline on push to the 'main' branch

jobs:
  build:
    runs-on: windows-latest  # Use the latest Windows environment
    
    steps:

      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up JDK (e.g., OpenJDK 17)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          java-package: jdk
          distribution: 'temurin'

      # Step 3: Cache Gradle dependencies for faster builds
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: C:\Users\runneradmin\.gradle\caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Step 4: Build the project using Gradle
      - name: Build with Gradle
        run: gradle build

      # Step 5: Run Selenium Tests
      - name: Run Tests
        run: gradle clean test --daemon

      # Step 6: Install Allure CLI using npm
      - name: Install Allure CLI via npm
        run: |
          npm install -g allure-commandline --save-dev

      # Step 7: List the contents of the 'build' directory for debugging
      - name: List build directory contents (for debugging)
        run: |
          dir build

      # Step 8: Generate Allure Report
      - name: Generate Allure Report
        run: |
          allure generate allure-results --clean -o allure-report
          ls -R allure-report  # Debugging to check if index.html exists

      # Step 9: Move Allure Report to Unique Folder
      - name: Move Allure Report to Unique Folder
        shell: bash
        run: |
          timestamp=$(date +%Y%m%d%H%M%S)
          mkdir -p public/reports/$timestamp
          mv allure-report/* public/reports/$timestamp/
          echo "REPORT_LINK=https://mamunurrashid-lgtm.github.io/sp-automation/reports/$timestamp/index.html" >> $GITHUB_ENV

      # Step 10: Display directory structure for debugging
      - name: List directory structure for verification
        shell: bash
        run: ls -R public/reports

      # Step 11: Deploy Allure Report to GitHub Pages
      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.TOKEN }}
          publish_dir: public  # Ensure GitHub Pages can find index.html
          publish_branch: gh-pages
          keep_files: true

      # Step 12: Send Email with Allure Report Link
      - name: Send email with Allure Report Link
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          secure: false
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}
          from: ${{ secrets.USERNAME }}
          to: mamunur.rashid@byslglobal.com
          subject: Submission of Automated API Testing Report for Your Review
          body: |
            
            Dear Sir,
            
            I hope this message finds you well.
            
            I am pleased to share that the API testing has been successfully completed, and the report has been generated using Allure Newman Reporter.
            You may review the detailed findings at your convenience via the link below:
            
            ${{ env.REPORT_LINK }}
            
            Kindly let me know if you have any feedback or require further clarification on any specific areas.
            
            Thank you for your time and consideration.
